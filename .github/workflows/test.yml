name: Test and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  data-quality-check:
    name: Data Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install pandas numpy

      - name: Run data quality check
        run: |
          python3 -c "
          import pandas as pd
          import numpy as np
          
          print('üîç Checking data quality...')
          
          # Check patients.csv
          try:
              patients_df = pd.read_csv('data/raw/patients.csv')
              print(f'‚úÖ Patients data: {len(patients_df)} records')
              print(f'   - Missing values: {patients_df.isnull().sum().sum()}')
              print(f'   - Duplicate records: {patients_df.duplicated().sum()}')
          except Exception as e:
              print(f'‚ùå Error reading patients.csv: {e}')
          
          # Check treatments.csv
          try:
              treatments_df = pd.read_csv('data/raw/treatments.csv')
              print(f'‚úÖ Treatments data: {len(treatments_df)} records')
              print(f'   - Missing values: {treatments_df.isnull().sum().sum()}')
              print(f'   - Duplicate records: {treatments_df.duplicated().sum()}')
          except Exception as e:
              print(f'‚ùå Error reading treatments.csv: {e}')
          
          # Check hospital analysis data
          try:
              analysis_df = pd.read_csv('data/raw/hospital data analysis.csv')
              print(f'‚úÖ Hospital analysis data: {len(analysis_df)} records')
              print(f'   - Missing values: {analysis_df.isnull().sum().sum()}')
              print(f'   - Duplicate records: {analysis_df.duplicated().sum()}')
              
              # Check data quality
              quality_score = 100
              if analysis_df.isnull().sum().sum() > 0:
                  quality_score -= 20
              if analysis_df.duplicated().sum() > 0:
                  quality_score -= 10
              
              print(f'üìä Data quality score: {quality_score}%')
              
          except Exception as e:
              print(f'‚ùå Error reading hospital analysis data: {e}')
          
          print('‚úÖ Data quality check completed!')
          "

  schema-validation:
    name: Schema Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate BigQuery schemas
        run: |
          echo "üîç Validating BigQuery schemas..."
          
          # Check if schema files exist
          for schema in schemas/*.json; do
              if [ -f "$schema" ]; then
                  echo "‚úÖ Found schema: $schema"
                  # Basic JSON validation
                  python3 -c "import json; json.load(open('$schema')); print('   - Valid JSON format')"
              else
                  echo "‚ùå Missing schema: $schema"
              fi
          done
          
          echo "‚úÖ Schema validation completed!"

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install flake8

      - name: Run flake8
        run: |
          echo "üîç Running code quality checks..."
          flake8 run_etl.py --max-line-length=120 --ignore=E501,W503 || true
          echo "‚úÖ Code quality check completed!"

  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan (Dry Run)
        run: |
          terraform plan \
            -var="project_id=pyspark-469619" \
            -var="region=us-central1" \
            -var="zone=us-central1-a" \
            -out=tfplan

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [data-quality-check, schema-validation, code-quality, terraform-validation, security-scan]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "üìä Test Results Summary:"
          echo "‚úÖ Data Quality Check: ${{ needs.data-quality-check.result }}"
          echo "‚úÖ Schema Validation: ${{ needs.schema-validation.result }}"
          echo "‚úÖ Code Quality: ${{ needs.code-quality.result }}"
          echo "‚úÖ Terraform Validation: ${{ needs.terraform-validation.result }}"
          echo "‚úÖ Security Scan: ${{ needs.security-scan.result }}"
          
          if [[ "${{ needs.data-quality-check.result }}" == "success" && 
                "${{ needs.schema-validation.result }}" == "success" && 
                "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.terraform-validation.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "üéâ All tests passed!"
          else
            echo "‚ö†Ô∏è Some tests failed. Check the logs above."
          fi