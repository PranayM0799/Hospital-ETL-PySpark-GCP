name: Test and Quality Checks (Simple)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  data-quality-check:
    name: Data Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy

      - name: Run data quality check
        run: |
          python3 << 'EOF'
          import pandas as pd
          import numpy as np
          from pathlib import Path

          def analyze_hospital_data():
              print("üîç Hospital Data Quality Analysis")
              print("=" * 50)
              
              file_path = "data/raw/hospital data analysis.csv"
              
              if not Path(file_path).exists():
                  print(f"‚ùå File not found: {file_path}")
                  return False
              
              try:
                  df = pd.read_csv(file_path)
                  print(f"‚úÖ Successfully loaded {len(df)} records")
                  
                  # Missing values check
                  missing_data = df.isnull().sum()
                  if missing_data.sum() == 0:
                      print("‚úÖ No missing values")
                  else:
                      print(f"‚ùå {missing_data.sum()} missing values")
                      return False
                  
                  # Duplicate check
                  duplicates = df.duplicated().sum()
                  if duplicates == 0:
                      print("‚úÖ No duplicate rows")
                  else:
                      print(f"‚ùå {duplicates} duplicate rows")
                      return False
                  
                  # Data validation checks
                  invalid_ages = df[(df['Age'] < 0) | (df['Age'] > 120)].shape[0]
                  negative_costs = df[df['Cost'] < 0].shape[0]
                  invalid_satisfaction = df[(df['Satisfaction'] < 1) | (df['Satisfaction'] > 5)].shape[0]
                  
                  if invalid_ages == 0 and negative_costs == 0 and invalid_satisfaction == 0:
                      print("‚úÖ All data validation checks passed")
                      print("üéâ Data quality score: 100%")
                      return True
                  else:
                      print(f"‚ùå Data quality issues found")
                      return False
                      
              except Exception as e:
                  print(f"‚ùå Error analyzing data: {e}")
                  return False

          if analyze_hospital_data():
              print("‚úÖ Data quality check passed")
              exit(0)
          else:
              print("‚ùå Data quality check failed")
              exit(1)
          EOF

  validate-schemas:
    name: Validate BigQuery Schemas
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema

      - name: Validate JSON schemas
        run: |
          python3 << 'EOF'
          import json
          import jsonschema
          from pathlib import Path

          def validate_schema(schema_file):
              try:
                  with open(schema_file, 'r') as f:
                      schema = json.load(f)
                  
                  # Basic schema validation
                  if not isinstance(schema, list):
                      print(f"‚ùå {schema_file}: Schema must be a list")
                      return False
                  
                  for field in schema:
                      required_fields = ['name', 'type', 'mode']
                      for req_field in required_fields:
                          if req_field not in field:
                              print(f"‚ùå {schema_file}: Missing required field '{req_field}'")
                              return False
                  
                  print(f"‚úÖ {schema_file}: Schema is valid")
                  return True
                  
              except Exception as e:
                  print(f"‚ùå {schema_file}: Error validating schema - {e}")
                  return False

          schemas = [
              "schemas/patient_schema.json",
              "schemas/treatment_schema.json", 
              "schemas/hospital_analysis_schema.json"
          ]
          
          all_valid = True
          for schema_file in schemas:
              if not validate_schema(schema_file):
                  all_valid = False
          
          if all_valid:
              print("‚úÖ All schemas are valid")
              exit(0)
          else:
              print("‚ùå Some schemas are invalid")
              exit(1)
          EOF

  test-pyspark-script:
    name: Test PySpark Script Syntax
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyspark

      - name: Test PySpark script syntax
        run: |
          python3 -m py_compile run_etl.py
          echo "‚úÖ PySpark script syntax is valid"

  notify-test-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [data-quality-check, validate-schemas, test-pyspark-script]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "üß™ Test Results Summary:"
          echo "Data Quality Check: ${{ needs.data-quality-check.result }}"
          echo "Schema Validation: ${{ needs.validate-schemas.result }}"
          echo "PySpark Syntax: ${{ needs.test-pyspark-script.result }}"
          
          if [[ "${{ needs.data-quality-check.result }}" == "success" && 
                "${{ needs.validate-schemas.result }}" == "success" && 
                "${{ needs.test-pyspark-script.result }}" == "success" ]]; then
            echo "‚úÖ All tests passed!"
            exit 0
          else
            echo "‚ùå Some tests failed!"
            exit 1
          fi
